{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","handlePost","post","handleNewComment","className","map","onePost","id","title","type","selectedPost","renderingPost","cn","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","value","handleComments","useState","name","setName","email","setEmail","text","setText","isLoading","setIsLoading","nameError","setNameError","emailError","setEmailError","textError","setTextError","inputDangerClass","addComent","a","trim","length","newComment","postId","htmlFor","placeholder","onChange","e","target","buttonClass","event","preventDefault","PostDetails","comments","setComments","loadCommentsError","setLoadCommentsError","useEffect","fetchComments","deleteComment","commentId","backupComments","filter","comment","href","UserSelector","selectedUser","handleSelectedUser","dropdown","setDropdown","users","setUsers","fetchUsers","role","user","App","setSelectedUser","setPosts","loadPostsError","setLoadPostsError","setPost","setNewComment","fetchPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a8abfbe.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | null;\n  handlePost: (value: Post) => void;\n  post: Post | null;\n  handleNewComment: (value: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, handlePost, post, handleNewComment,\n}) => {\n  const buttonClass = (selectedPost: Post | null, renderingPost: Post) => cn(\n    'button',\n    'is-link',\n    { 'is-light': selectedPost && selectedPost.id !== renderingPost.id },\n  );\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts && posts\n            .map(onePost => (\n              <tr data-cy=\"Post\" key={onePost.id}>\n                <td data-cy=\"PostId\">{onePost.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {onePost.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={buttonClass(post, onePost)}\n                    onClick={() => {\n                      handlePost(onePost);\n                      handleNewComment(false);\n                    }}\n                  >\n                    {post?.id === onePost.id ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    // .then(response => response.json())\n    // .catch(() => ({\n    //   Response: 'False',\n    //   Error: 'unexpected error',\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n  handleComments: (value: Comment[]) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post, handleComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [textError, setTextError] = useState(false);\n\n  const buttonClass = (value: boolean) => cn(\n    'button',\n    'is-link',\n    { 'is-loading': value },\n  );\n\n  const inputDangerClass = (value: boolean) => cn(\n    'input',\n    { 'is-danger': value },\n  );\n\n  const textDangerClass = (value: boolean) => cn(\n    'textarea',\n    { 'is-danger': value },\n  );\n\n  const clearInputs = () => {\n    setEmail('');\n    setName('');\n    setText('');\n    setNameError(false);\n    setEmailError(false);\n    setTextError(false);\n  };\n\n  const addComent = async () => {\n    if (name.trim().length === 0) {\n      setNameError(true);\n    }\n\n    if (email.trim().length === 0) {\n      setEmailError(true);\n    }\n\n    if (text.trim().length === 0) {\n      setTextError(true);\n    }\n\n    if (name.trim().length !== 0\n    && email.trim().length !== 0 && text.trim().length !== 0) {\n      setIsLoading(true);\n      try {\n        const newComment: Comment = {\n          postId: +(post.id),\n          name: name.trim(),\n          email: email.trim(),\n          body: text.trim(),\n          id: 0,\n        };\n\n        await client.post('\\\\comments', newComment);\n      } finally {\n        try {\n          const data = await client.get<Comment[]>(`\\\\comments?postId=${post?.id}`);\n\n          if (data) {\n            handleComments(data);\n          }\n        } finally {\n          setIsLoading(false);\n        }\n\n        setText('');\n      }\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={name}\n            className={inputDangerClass(nameError)}\n            onChange={(e) => {\n              setName(e.target.value);\n              setNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        ) }\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={inputDangerClass(emailError)}\n            value={email}\n            onChange={(e) => {\n              setEmail(e.target.value);\n              setEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={textDangerClass(textError)}\n            value={text}\n            onChange={(e) => {\n              setText(e.target.value);\n              setTextError(false);\n            }}\n          />\n        </div>\n\n        {textError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={buttonClass(isLoading)}\n            onClick={(event) => {\n              event.preventDefault();\n              addComent();\n            }}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => clearInputs()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post | null;\n  newComment: boolean;\n  handleNewComment: (value: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post, newComment, handleNewComment,\n}) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadCommentsError, setLoadCommentsError] = useState(false);\n\n  useEffect(() => {\n    setLoadCommentsError(false);\n\n    async function fetchComments() {\n      if (post) {\n        setIsLoading(true);\n      }\n\n      try {\n        const data = await client.get<Comment[]>(`\\\\comments?postId=${post?.id}`);\n\n        if (data) {\n          setComments(data);\n        }\n      } catch (error) {\n        setLoadCommentsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchComments();\n  }, [post]);\n\n  const deleteComment = async (commentId: number) => {\n    const backupComments = comments ? [...comments] : null;\n\n    setComments(comments && comments\n      .filter(comment => comment.id !== commentId));\n    try {\n      await client.delete(`\\\\comments/${commentId}`);\n    } catch (error) {\n      setComments(backupComments ? [...backupComments] : null);\n    }\n  };\n\n  const handleComments = (value: Comment[]) => {\n    setComments(value);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {post && `#${post.id}: ${post?.title}`}\n          </h2>\n          <p data-cy=\"PostBody\">\n\n            {post && post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading ? (<Loader />) : (\n            <>\n              {post && loadCommentsError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {post && comments?.length === 0 && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {comments && comments\n                .map(comment => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={comment.id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => deleteComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                ))}\n              {!newComment && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => handleNewComment(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n\n            </>\n          )}\n        </div>\n\n        { newComment && post\n        && (\n          <NewCommentForm\n            post={post}\n            handleComments={handleComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\nconst dropdownClass = (value: boolean) => cn(\n  'dropdown',\n  { 'is-active': value === true },\n);\n\ntype Props = {\n  selectedUser: null | User,\n  handleSelectedUser: (value: User) => void,\n  handlePost: (value: Post | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser, handleSelectedUser, handlePost,\n}) => {\n  const [dropdown, setDropdown] = useState(false);\n  const [users, setUsers] = useState<null | User[]>(null);\n\n  useEffect(() => {\n    async function fetchUsers() {\n      try {\n        const data = await client.get<User[]>('\\\\users');\n\n        setUsers(data);\n      } catch (error) {\n        throw new Error('user loading failed');\n      }\n    }\n\n    fetchUsers();\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={dropdownClass(dropdown)}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdown(!dropdown)}\n        >\n          <span>\n            {selectedUser !== null\n              ? selectedUser.name : 'Choose a user'}\n\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users && users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => {\n                handleSelectedUser(user);\n                setDropdown(false);\n                handlePost(null);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\nimport { Loader } from './components/Loader';\n\nconst sidebarClass = (value: Post | null) => cn(\n  'tile',\n  'is-parent',\n  'is-8-desktop',\n  'Sidebar',\n  { 'Sidebar--open': value !== null },\n);\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [loadPostsError, setLoadPostsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [post, setPost] = useState<Post | null>(null);\n  const [newComment, setNewComment] = useState(false);\n\n  const handleSelectedUser = (value: User) => {\n    setSelectedUser(value);\n  };\n\n  const handlePost = (value: Post | null) => {\n    setPost(value?.id === post?.id ? null : value);\n  };\n\n  const handleNewComment = (value: boolean) => {\n    setNewComment(value);\n  };\n\n  useEffect(() => {\n    setLoadPostsError(false);\n\n    if (selectedUser) {\n      setIsLoading(true);\n    }\n\n    async function fetchPosts() {\n      try {\n        const data = await client.get<Post[]>(`\\\\posts?userId=${selectedUser?.id}`);\n\n        if (data) {\n          setPosts(data);\n        }\n      } catch (error) {\n        setLoadPostsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchPosts();\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  handleSelectedUser={handleSelectedUser}\n                  handlePost={handlePost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                ) }\n\n                {isLoading ? (<Loader />) : (\n                  <>\n                    { selectedUser && loadPostsError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    ) }\n\n                    { selectedUser && posts?.length === 0\n                    && !loadPostsError && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    ) }\n\n                    { selectedUser && posts && posts?.length > 0 && (\n                      <PostsList\n                        posts={posts}\n                        handlePost={handlePost}\n                        post={post}\n                        handleNewComment={handleNewComment}\n                      />\n                    )}\n                  </>\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={sidebarClass(post)}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                post={post}\n                newComment={newComment}\n                handleNewComment={handleNewComment}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}